name: Vercel Preview Deployment

env:
    VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
    push:
        branches-ignore:
            - main

jobs:
    Cleanup:
        runs-on: ubuntu-latest
        steps:
            - name: Install GitHub CLI
              run: sudo apt-get install gh -y

            - name: Install gh-actions-cache Extension
              run: gh extension install actions/gh-actions-cache

            - name: Clear Cache
              run: gh actions-cache delete deps-node-modules --confirm

    Build:
        needs: Cleanup
        runs-on: ubuntu-latest
        outputs:
            deployment_id: ${{ steps.deployment.outputs.deployment_id }}
        steps:
            - uses: actions/checkout@v4

            - uses: chrnorm/deployment-action@v2.0.7
              name: Create GitHub deployment
              id: deployment
              with:
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  environment: preview
                  initial-status: 'pending'

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: Load & Cache Dependencies
              uses: ./.github/actions/cached-deps

            - name: Update deployment status (failure)
              if: failure()
              uses: chrnorm/deployment-status@v2.0.3
              with:
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  state: 'failure'
                  deployment-id: ${{ steps.deployment.outputs.deployment_id }}

    Lint-Check:
        runs-on: ubuntu-latest
        needs: [Build]
        steps:
            - name: Use build artifacts
              uses: actions/checkout@v4
              with:
                  path: ${{ github.workspace }}
            - name: Load & Cache Dependencies
              uses: ./.github/actions/cached-deps

            - name: Run Lint
              run: npm run lint

            - name: Update deployment status (failure)
              if: failure()
              uses: chrnorm/deployment-status@v2.0.3
              with:
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  state: 'failure'
                  deployment-id: ${{ needs.Build.outputs.deployment_id }}

    Format-Check:
        runs-on: ubuntu-latest
        needs: [Build]
        steps:
            - name: Use build artifacts
              uses: actions/checkout@v4
              with:
                  path: ${{ github.workspace }}
            - name: Load & Cache Dependencies
              uses: ./.github/actions/cached-deps

            - name: Run Prettier:Check
              run: npm run prettier:check

            - name: Update deployment status (failure)
              if: failure()
              uses: chrnorm/deployment-status@v2.0.3
              with:
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  state: 'failure'
                  deployment-id: ${{ needs.Build.outputs.deployment_id }}

    Test:
        runs-on: ubuntu-latest
        needs: [Lint-Check, Format-Check, Build]
        steps:
            - name: Use build artifacts
              uses: actions/checkout@v4
              with:
                  path: ${{ github.workspace }}
            - name: Load & Cache Dependencies
              uses: ./.github/actions/cached-deps

            - name: Run Tests
              run: npm run test

            - name: Update deployment status (failure)
              if: failure()
              uses: chrnorm/deployment-status@v2.0.3
              with:
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  state: 'failure'
                  deployment-id: ${{ needs.Build.outputs.deployment_id }}

    Deploy-Preview:
        runs-on: ubuntu-latest
        needs: [Test, Lint-Check, Format-Check, Build]
        steps:
            - name: Use build artifacts
              uses: actions/checkout@v4
              with:
                  path: ${{ github.workspace }}
            - name: Install Vercel CLI
              run: npm install --global vercel@latest

            - name: Pull Vercel Environment Information
              run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

            - name: Build Project Artifacts
              run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

            - name: Deploy Project Artifacts to Vercel
              run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

            - name: Update deployment status (success)
              if: success()
              uses: chrnorm/deployment-status@v2.0.3
              with:
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  state: 'success'
                  deployment-id: ${{ needs.Build.outputs.deployment_id }}

            - name: Update deployment status (failure)
              if: failure()
              uses: chrnorm/deployment-status@v2.0.3
              with:
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  state: 'failure'
                  deployment-id: ${{ needs.Build.outputs.deployment_id }}
